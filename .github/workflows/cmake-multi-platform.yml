name: CMake Build and Test with GTest

on: [pull_request]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        compiler: [gcc, clang]

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Set up CMake
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake
        cmake --version
      if: matrix.os == 'ubuntu-latest'

    - name: Install CMake (Windows)
      run: |
        choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'
        cmake --version
      if: matrix.os == 'windows-latest'

    - name: Install gtest (Ubuntu)
      run: |
        sudo apt-get install -y libgtest-dev
        sudo apt-get install -y cmake # required for gtest
      if: matrix.os == 'ubuntu-latest'

    - name: Install gtest (Windows)
      run: |
        git clone https://github.com/google/googletest.git
        cd googletest
        mkdir build && cd build
        cmake ..
        cmake --build . --config Release
        cmake --build . --target install
        cd ../..
        rm -rf googletest
      if: matrix.os == 'windows-latest'

    - name: Build and Test
      run: |
        mkdir build
        cd build
        cmake -DCMAKE_C_COMPILER=$CC -DCMAKE_CXX_COMPILER=$CXX ..
        cmake --build .
        ctest -C Release
      env:
        CC: ${{ matrix.compiler == 'gcc' && matrix.os == 'ubuntu-latest' && 'gcc' || matrix.compiler == 'clang' && matrix.os == 'ubuntu-latest' && 'clang' }}
        CXX: ${{ matrix.compiler == 'gcc' && matrix.os == 'ubuntu-latest' && 'g++' || matrix.compiler == 'clang' && matrix.os == 'ubuntu-latest' && 'clang++' }}
      if: matrix.compiler == 'gcc' || matrix.compiler == 'clang'
